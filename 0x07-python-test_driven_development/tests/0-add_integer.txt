===========================
How to Use 0-add_integer.py
===========================

This module defines a function `add_integer(a, b=98)` that performs integer addition.

Usage
=====

The `add_integer(...)` function returns the addition of the two arguments. It works with both integers and floating-point values.

1. Adding integers:
   - Example:
     ```python
     >>> add_integer = __import__('0-add_integer').add_integer
     >>> add_integer(2, 3)
     5
     ```
   - Output:
     ```python
     >>> add_integer(2, 3)
     5
     ```

2. Adding integers with different signs:
   - Example:
     ```python
     >>> add_integer(2, -3)
     -1
     ```
   - Output:
     ```python
     >>> add_integer(2, -3)
     -1
     ```

3. Adding floating-point values:
   - Example:
     ```python
     >>> add_integer(2.0, 3.0)
     5
     ```
   - Output:
     ```python
     >>> add_integer(2.0, 3.0)
     5
     ```

4. Adding floating-point values with rounding down:
   - Example:
     ```python
     >>> add_integer(2.9, 0.2)
     2
     ```
   - Output:
     ```python
     >>> add_integer(2.9, 0.2)
     2
     ```

5. Adding floating-point values with rounding up:
   - Example:
     ```python
     >>> add_integer(-2.9, -0.2)
     -2
     ```
   - Output:
     ```python
     >>> add_integer(-2.9, -0.2)
     -2
     ```

6. Adding a floating-point value with an integer:
   - Example:
     ```python
     >>> add_integer(2.3, -3)
     -1
     ```
   - Output:
     ```python
     >>> add_integer(2.3, -3)
     -1
     ```

The second argument is optional and has a default value of 98. If the second argument is omitted, it will be added to the first argument.

7. Adding an integer with the default value:
   - Example:
     ```python
     >>> add_integer(2)
     100
     ```
   - Output:
     ```python
     >>> add_integer(2)
     100
     ```

Handling Non-Numbers
====================

The `add_integer()` function expects both arguments to be either integers or floats. If either argument is not an integer or a float, a `TypeError` will be raised:

8. Adding a non-integer value as the first argument:
   - Example:
     ```python
     >>> add_integer("hello", 3)
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
       File "0-add_integer.py", line 5, in add_integer
         raise TypeError("a must be an integer")
     TypeError: a must be an integer
     ```
   - Output:
     ```python
     >>> add_integer("hello", 3)
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
       File "0-add_integer.py", line 5, in add_integer
         raise TypeError("a must be an integer")
     TypeError: a must be an integer
     ```

9. Adding a non-integer value as the second argument:
   - Example:
     ```python
     >>> add_integer(2, "hello")
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
       File "0-add_integer.py", line 5, in add_integer
         raise TypeError("b must be an integer")
     TypeError: b must be an integer
     ```
   - Output:
     ```python
     >>> add_integer(2, "hello")
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
       File "0-add_integer.py", line 5, in add_integer
         raise TypeError("b must be an integer")
     TypeError: b must be an integer
     ```

10. Adding `None` as the first argument:
    - Example:
      ```python
      >>> add_integer(None)
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "0-add_integer.py", line 5, in add_integer
          raise TypeError("a must be an integer")
      TypeError: a must be an integer
      ```
    - Output:
      ```python
      >>> add_integer(None)
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "0-add_integer.py", line 5, in add_integer
          raise TypeError("a must be an integer")
      TypeError: a must be an integer
      ```

11. Adding `None` as the second argument:
    - Example:
      ```python
      >>> add_integer(2.3, None)
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "0-add_integer.py", line 5, in add_integer
          raise TypeError("b must be an integer")
      TypeError: b must be an integer
      ```
    - Output:
      ```python
      >>> add_integer(2.3, None)
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "0-add_integer.py", line 5, in add_integer
          raise TypeError("b must be an integer")
      TypeError: b must be an integer
      ```

If both arguments are non-integers and non-floats, a `TypeError` message is only printed for the first argument:

12. Adding two non-integer and non-float values:
    - Example:
      ```python
      >>> add_integer("hello", "there")
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "0-add_integer.py"
